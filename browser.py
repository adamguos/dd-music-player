from dbhandler import DbHandler

class Browser:
	'Class for traversing the browser structure and controlling local media playback'

	def __init__(self):
		self.dbh = DbHandler()
		self.dbh.initmetadata()
		self.rootnode = self.initbrowsernodes()

	def initbrowsernodes(self):
		main = BrowserNode('main', False, ['Local media', 'Spotify', 'Restart'])
		tags = BrowserNode('tags', False, ['Album artist', 'Artist', 'Composer', 'Genre'])

		n = [
			BrowserNode('albumartist', True),
			BrowserNode('artist', True),
			BrowserNode('composer', True),
			BrowserNode('genre', True)
		]

		for b in n:
			albums = BrowserNode('album', True)
			albums.addchild(BrowserNode('track', True))
			b.addchild(albums)

		tags.addchild(n)
		main.addchild(tags)

class BrowserNode:
	'Class representing each level (node) of the browser'

	# usage: a string denoting the type of content the node contains; if autopop is True, then this field will be used as the db query
	# autopop: boolean, denotes whether or not the node's contents should be automatically populated
	# items: a list of strings, each of which becomes a selectable item provided by the Browser; can be generated by performing a db query
	def __init__(self, label, autopop, items = []):
		self.label = label
		self.autopop = autopop
		self.children = []
		self.parent = None

	def getchildren(self):
		return self.children

	def addchild(self, child):
		if not child in self.children:
			child.setparent(self)
			self.children.append(child)

	def removechild(self, child):
		del self.children[self.children.index(child)]

	def getparent(self):
		return self.parent

	def setparent(self, parent):
		self.parent = parent
